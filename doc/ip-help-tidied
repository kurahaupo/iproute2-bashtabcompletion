ip -Version help

ip utility, iproute2-ss131122

################################
ip  help

Usage: ip [ IPOPTION ... ] OBJECT {
                                  | COMMAND
                                  | help
                                  }
       ip [ -force ] -batch {
                            | FILENAME
                            | -
                            }
OBJECT := {
          | address
          | addrlabel
          | l2tp
          | link
          | maddress
          | monitor
          | mroute
          | mrule
          | neigh
          | netns
          | ntable
          | route
          | rule
          | tcp_metrics
          | token
          | tunnel
          | tuntap
          | xfrm
          }
IPOPTION := {
            | -0
            | -4
            | -6
            | -B
            | -b[atch] [filename]
            | -D
            | -d[etails]
            | -f[amily] {
                        | bridge
                        | dnet
                        | inet
                        | inet6
                        | ipx
                        | link
                        }
            | -I
            | -l[oops] MAXIMUM_ADDRESS_FLUSH_ATTEMPTS
            | -o[neline]
            | -r[esolve]
            | -rc[vbuf] [size]
            | -s[tatistics]
            | -t[imestamp]
            | -V[ersion]
            }

################################
Shared non-terminals

ADDR := {
        | IPv4_ADDR
        | IPv6_ADDR
        }

ANY_ADDR := {
            | ADDR
            | any
            }

DEVICE := STRING

DPREFIX := {
           | PREFIX
           | default
           }

LIFETIME := {
            | SECONDS
            | forever
            }

LLADDR := {
          | HH:HH:HH:HH:HH:HH
          | HH:HH:HH:HH:HH:HH:HH:HH
          }

ON_OFF := {
          | off
          | on
          }

(% ONE_BIT includes any representation of the integer powers of two between 1
 % and 128, including octal and hexadecimal, such as 0x00001 or 00200. %)
ONE_BIT := {
           | 1
           | 2
           | 4
           | 8
           | 16
           | 32
           | 64
           | 128
           }

(% Ports are normally non-zero, but 0 can sometimes be used as a wildcard. %)
PORTZ := { 0..65535 }                           (% 16-bit unsigned integer %)

PREFIX := ADDR/NUMBER

SCOPE := {
         | NUMBER
         | global
         | host
         | link
         }

USER  := {
         | UID
         | USERNAME                             (% getpwent(): getent passwd or cat /etc/passwd %)
         }

USERGROUP := {
             | GID
             | GROUPNAME                        (% getgrent();: getent group or cat /etc/group %)
             }

################################
ip address help

Usage: ip address                               (% defaults to 'show' %)
       ip address {
                  | add
                  | change
                  | replace
                  } [ {
                      | ADDR                    (% exactly one of ADDR or PREFIX required %)
                      | PREFIX                  (% exactly one of ADDR or PREFIX required; not with 'peer' %)
                      | anycast ADDR
                      | broadcast ADDR
                      | dev DEVICE              (% required %)
                      | home
                      | label DEVICE:STRING
                      | nodad
                      | peer PREFIX             (% not with PREFIX %)
                      | preferred_lft LIFETIME
                      | scope SCOPE
                      | valid_lft LIFETIME
                      } ... ]
       ip address del [ {
                        | ADDR                  (% exactly one of ADDR or PREFIX required %)
                        | PREFIX                (% exactly one of ADDR or PREFIX required %)
                        | anycast ADDR
                        | broadcast ADDR
                        | dev DEVICE            (% required %)
                        | label STRING
                        | peer PREFIX           (% not with PREFIX %)
                        | scope SCOPE
                        } ... ]
       ip address {
                  | flush
                  | save
                  | show
                  } [ {
                      | dadfailed
                      | deprecated
                      | dev DEVICE
                      | dynamic
                      | home
                      | label PATTERN
                      | nodad
                      | permanent
                      | primary
                      | scope SCOPE
                      | secondary
                      | temporary
                      | tentative
                      | to PREFIX
                      | up
                      } ... ]
       ip address {
                  | restore
                  | showdump
                  }

aliases:
  list → show

################################
ip addrlabel help

Usage: ip addrlabel                             (% defaults to 'list' %)
       ip addrlabel {
                    | add
                    | del
                    | flush
                    | list
                    } [ {
                        | dev DEVICE
                        | label LABEL
                        | prefix PREFIX
                        } ... ]

aliases:
  show → list

################################
ip l2tp help

Usage: ip l2tp add tunnel [ { encap {
                                    | ip
                                    | udp
                                    }
                            | local ANY_ADDR
                            | peer_tunnel_id ID
                            | remote ANY_ADDR
                            | tunnel_id ID
                            | udp_dport PORTZ
                            | udp_sport PORTZ
                            } ... ]
Usage: ip l2tp add session [ {
                             | cookie HEXSTR
                             | l2spec_type L2SPEC
                             | name NAME
                             | offset OFFSET
                             | peer_cookie HEXSTR
                             | peer_offset OFFSET
                             | peer_session_id ID
                             | session_id ID
                             | tunnel_id ID
                             } ... ]
       ip l2tp del tunnel tunnel_id ID
       ip l2tp del session {
                           | session_id ID
                           | tunnel_id ID
                           } ...                (% both required %)
       ip l2tp show tunnel [ tunnel_id ID ]
       ip l2tp show session [ {
                              | session_id ID
                              | tunnel_id ID
                              } ... ]

NAME   := STRING
ANY_ADDR := {
            | ADDR
            | any
            }
ID     := { 1..4294967295 }
HEXSTR := {
          | HHHHHHHH
          | HHHHHHHHHHHHHHHH
          }                                     (% 8 or 16 hex digits %)
L2SPEC := {
          | default
          | none
          }

################################
ip link help

Usage: ip link add {
                   | address LLADDR
                   | broadcast LLADDR
                   | link DEVICE                (% required %)
                   | mtu MTU
                   | [ name ] NEWNAME           (% required %)
                   | numrxqueues QUEUE_COUNT
                   | numtxqueues QUEUE_COUNT
                   | txqueuelen PACKETS
                   | type LTYPE+ARGS            (% required; see separate sections for ARGS %)
                   } ...

       ip link delete {
                      | [ dev ] DEVICE          (% required %)
                      | type LTYPE+ARGS         (% see separate sections for ARGS %)
                      } ...

       ip link set {
                   | address LLADDR
                   | alias NAME
                   | allmulticast ON_OFF
                   | arp ON_OFF
                   | broadcast LLADDR
                   | [ dev ] DEVICE             (% 'dev' or 'group' required %)
                   | down                       (% at most one of 'up' or 'down' %)
                   | dynamic ON_OFF
                   | group DEVGROUP             (% 'dev' or 'group' required %)
                   | mac LLADDR                 (% only with 'vf' %)
                   | master DEVICE              (% at most one of 'master' or 'nomaster' %)
                   | mtu MTU
                   | multicast ON_OFF
                   | name NEWNAME
                   | netns {
                           | NAME
                           | PID
                           }
                   | nomaster                   (% at most one of 'master' or 'nomaster' %)
                   | promisc ON_OFF
                   | qos VLAN-QOS               (% only with 'vf' then 'vlan' %)
                   | rate TXRATE                (% only with 'vf' %)
                   | spoofchk ON_OFF            (% only with 'vf' %)
                   | state {
                           | auto
                           | disable
                           | enable
                           }                    (% only with 'vf' %)
                   | trailers ON_OFF
                   | txqueuelen PACKETS
                   | up                         (% at most one of 'up' or 'down' %)
                   | vf NUM
                   | vlan VLANID                (% only with 'vf' %)
                   } ...

       ip link show [ {
                      | [ dev ] DEVICE          (% at most one of 'dev' or 'group' %)
                      | group DEVGROUP          (% at most one of 'dev' or 'group' %)
                      | up
                      } ... ]

VLANID := { 1..4095 }
VLAN-QOS := (% unknown %)

LTYPE+ARGS := {
              | bridge
              | can [ CAN_ARG ... ]
              | dummy
              | gre
              | gretap
              | ifb
              | ip6gre
              | ip6gretap
              | ip6tnl
              | ipip
              | ipoib
              | macvlan [ MACVLAN_ARG ... ]
              | macvtap
              | sit
              | vcan
              | veth [ VETH_ARG ... ]
              | vlan [ VLAN_ARG ... ]
              | vti
              | vxlan
              }

CAN_ARG := { berr-reporting ON_OFF
           | bitrate BITRATE
           | listen-only ON_OFF
           | loopback ON_OFF
           | one-shot ON_OFF
           | phase-seg1 SEGNUM
           | phase-seg2 SEGNUM
           | prop-seg SEGNUM
           | restart
           | restart-ms NUMBER                  (% milliseconds %)
           | sample-point SAMPLE-POINT
           | sjw { 1..4 }
           | tq NUMBER
           | triple-sampling ON_OFF
           }

BITRATE := { 1..1000000 }
SEGNUM := { 1..8 }
SAMPLE-POINT := { 0.000..0.999 }

MACVLAN_ARG := mode {
                    | bridge
                    | private
                    | vepa
                    }

VETH_ARG := peer [ VE_OPT ... ]
VE_OPT := (unknown)

VLAN_ARG := {
            | egress-qos-map QOS-MAP ...
            | gvrp ON_OFF
            | id VLANID                         (% required %)
            | ingress-qos-map QOS-MAP ...
            | loose_binding ON_OFF
            | reorder_hdr ON_OFF
            }
QOS-MAP := FROM:TO
FROM := 32bitNUMBER
TO := 32bitNUMBER

################################
ip maddress help

Usage: ip maddress {
                   | add
                   | del
                   } MULTIADDR dev DEVICE
       ip maddress show [ dev DEVICE ]

################################
ip monitor help

Usage: ip monitor {
                  | OBJECT ...
                  | all
                  } [ {
                      | file FILENAME
                      | label
                      } ... ]

(OBJECT is as per top-level)
OBJECT := {
          | address
          | link
          | mroute
          | neigh
          | netconf
          | prefix
          | route
          }

################################
ip mroute help

Usage: ip mroute show [ {
                        | from PREFIX
                        | iif DEVICE
                        | table {
                                | TABLE_ID
                                | all
                                }
                        | [ to ] PREFIX
                        } ... ]

TABLE_ID := {
            | NUMBER
            | default
            | local
            | main
            }

################################
ip mrule help

Usage: ip rule {
               | add
               | del
               | flush
               | list
               } [ {
                   | from DPREFIX
                   | fwmark FWMARK[/MASK]
                   | goto NUMBER
                   | iif STRING
                   | not                        (% need to check whether this must go first? %)
                   | oif STRING
                   | pref NUMBER
                   | prohibit
                   | realms [SRCREALM/]DSTREALM
                   | reject
                   | suppress_ifgroup DEVGROUP
                   | suppress_prefixlength NUMBER
                   | table(lookup) TABLE_ID
                   | to DPREFIX
                   | tos TOS
                   | unreachable
                   } ... ]

aliases:
  show → list

TABLE_ID (% as for 'ip mroute' %)

################################
ip neigh help

Usage: ip neigh {
                | add
                | change
                | del
                | replace
                } {
                  | ADDR                        (% exactly one of ADDR or 'proxy' required %)
                  | dev DEVICE
                  | lladdr LLADDR               (% not with 'proxy' %)
                  | nud NUDSTATE                (% not with 'proxy' %)
                  | proxy ADDR                  (% exactly one of ADDR or 'proxy' required %)
                  }

       ip neigh {
                | flush
                | show
                } [ {
                    | dev DEVICE
                    | nud NUDSTATE
                    | to DPREFIX
                    } ... ]

aliases:
  list → show

NUDSTATE := {
            | ONE_BIT
            | 0
            | noarp
            | permanent
            | reachable
            | stale
            }

################################
ip netns help

Usage: ip netns {
                | add NAME
                | delete NAME
                | exec NAME CMD ...
                | identify PID
                | list
                | monitor
                | pids NAME
                }

aliases:
  show → list

################################
ip ntable help

Usage: ip ntable change {
                        | anycast_delay MSEC
                        | app_probs VAL
                        | base_reachable MSEC
                        | delay_probe MSEC
                        | dev DEVICE
                        | gc_int MSEC
                        | gc_stale MSEC
                        | locktime MSEC
                        | mcast_probes VAL
                        | name NAME           (% required %)
                        | proxy_delay MSEC
                        | proxy_queue LEN
                        | queue LEN
                        | retrans MSEC
                        | thresh1 VAL
                        | thresh2 VAL
                        | thresh3 VAL
                        | ucast_probes VAL
                        } ...
       ip ntable show [ {
                        | dev DEVICE
                        | name NAME
                        } ... ]

################################
ip route help

Usage: ip route {
                | flush
                | list
                | save
                } [ {
                    | exact DPREFIX
                    | match DPREFIX
                    | proto RTPROTO
                    | root DPREFIX
                    | scope SCOPE
                    | table {
                            | TABLE_ID
                            | all
                            }
                    | type RTYPE
                    } ... ]
       ip route restore
       ip route showdump
       ip route get [ {
                      | ADDRESS                 (% required %)
                      | from ADDRESS
                      | iif DEVICE
                      | mark NUMBER
                      | oif DEVICE
                      | tos TOS
                      } ... ]
       ip route {
                | add
                | append
                | change
                | del
                | monitor
                | replace
                } [ {
                    | [ RTYPE ] DPREFIX         (% required %)
                    | advmss NUMBER
                    | cwnd NUMBER
                    | dev DEVICE
                    | equalize                  (% @DEPRECATED@ %)
                    | hoplimit NUMBER
                    | initcwnd NUMBER
                    | initrwnd NUMBER
                    | metric METRIC
                    | mtu NUMBER
                    | onlink
                    | pervasive
                    | proto RTPROTO
                    | quickack BOOL
                    | realms REALM
                    | reordering NUMBER
                    | rto_min TIME
                    | rtt TIME
                    | rttvar TIME
                    | scope SCOPE
                    | src ADDRESS
                    | ssthresh NUMBER
                    | table TABLE_ID
                    | tos TOS
                    | via ADDRESS
                    | weight NUMBER
                    | window NUMBER
                    } ... ]
                  [ nexthop {
                            | dev DEVICE
                            | onlink
                            | pervasive
                            | via ADDRESS
                            | weight NUMBER
                            } ... ] ...

aliases:
  show → list

RTYPE := {
         | blackhole
         | broadcast
         | local
         | multicast
         | nat
         | prohibit
         | throw
         | unicast
         | unreachable
         }
TABLE_ID (% as for 'ip mroute' %)
SCOPE := {
         | NUMBER
         | global
         | host
         | link
         }
RTPROTO := {
           | NUMBER
           | boot
           | kernel
           | static
           }
BOOL := {
        | 0
        | 1
        }
TIME := NUMBER{s|ms|us|ns|j}

################################
ip rule help

Usage: ip rule list
Usage: ip rule {
               | add
               | del
               | flush
               } [ {
                   | from DPREFIX
                   | fwmark FWMARK[/MASK]
                   | goto NUMBER                (% exactly one of 'goto', 'prohibit', 'realms', 'reject', 'table' or 'unreachable' %)
                   | iif DEVICE
                   | not
                   | oif DEVICE
                   | pref NUMBER
                   | prohibit                   (% exactly one of 'goto', 'prohibit', 'realms', 'reject', 'table' or 'unreachable' %)
                   | realms REALM_PAIR          (% exactly one of 'goto', 'prohibit', 'realms', 'reject', 'table' or 'unreachable' %)
                   | reject                     (% exactly one of 'goto', 'prohibit', 'realms', 'reject', 'table' or 'unreachable' %)
                   | suppress_ifgroup DEVGROUP
                   | suppress_prefixlength NUMBER
                   | table TABLE_ID             (% exactly one of 'goto', 'prohibit', 'realms', 'reject', 'table' or 'unreachable' %)
                   | to DPREFIX
                   | tos TOS
                   | unreachable                (% exactly one of 'goto', 'prohibit', 'realms', 'reject', 'table' or 'unreachable' %)
                   } ... ]

aliases:
  show → list
  prio → pref
  dev  → iif

REALM_PAIR := [REALM(SRC)/]REALM(DEST)
TABLE_ID (% as for 'ip mroute' %)

################################
ip tcp_metrics help

Usage: ip tcp_metrics/tcpmetrics {
                                 | COMMAND
                                 | help
                                 }
       ip tcp_metrics {
                      | delete
                      | flush
                      | show
                      } [ [ address ] PREFIX ]

aliases:
  list → show

################################
ip token help

Usage: ip token {
                | get
                | list
                | set
                } [ TOKEN ] [ dev DEVICE ]

aliases:
  show → list

################################
ip tunnel help

Usage: ip tunnel {
                 | 6rd
                 | add
                 | change
                 | del
                 | prl
                 | show
                 } [ {
                     | TUNDEV
                     | 6rd-prefix ANY_ADDR
                     | 6rd-relay_prefix ANY_ADDR
                     | 6rd-reset
                     | dev PHYS_DEV
                     | icsum
                     | ikey KEY
                     | iseq
                     | local ANY_ADDR
                     | mode {
                            | gre
                            | ipip
                            | isatap
                            | sit
                            | vti
                            }
                     | nopmtudisc
                     | ocsum
                     | okey KEY
                     | oseq
                     | pmtudisc
                     | prl-default ANY_ADDR
                     | prl-delete ANY_ADDR
                     | prl-nodefault ANY_ADDR
                     | remote ANY_ADDR
                     | tos TOS
                     | ttl TTL
                     } ... ]

TUNDEV := STRING                                (% your choice of name %)
TOS  := {
        | STRING
        | 00..ff
        | inherit
        | inherit/STRING
        | inherit/00..ff
        }
TTL  := {
        | 1..255
        | inherit
        }
KEY  := {
        | DOTTED_QUAD
        | NUMBER
        }

################################
ip tuntap help

Usage: ip tuntap {
                 | add
                 | del
                 } [ {
                     | dev PHYS_DEV
                     | group USERGROUP
                     | mode {
                            | tap
                            | tun
                            }
                     | multi_queue              (% at most one of 'one_queue' or 'multi_queue' %)
                     | one_queue                (% at most one of 'one_queue' or 'multi_queue' %)
                     | pi
                     | user USER
                     | vnet_hdr
                     } ... ]

################################
ip xfrm help

Usage: ip xfrm XFRM_OBJECT {
                           | COMMAND
                           | help
                           }
XFRM_OBJECT := {
               | monitor
               | policy
               | state
               }

################################
